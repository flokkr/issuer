// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bash/check.sh
// bash/issue.sh
// bash/keytab.sh
// bash/root.sh

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataBashChecksh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x41\xb2\xc2\x20\x10\x84\xe1\x3d\xa7\xe8\xc7\xdb\xe8\x22\xce\x21" +
	"\x3c\xc9\x80\x28\x53\x90\x09\x86\x31\x55\x29\xcb\xbb\x5b\xa2\xcb\xff\xeb\xfe\xff\xa3\x47\x5f\x29\x88\x52\xd2\x0d" +
	"\x81\x7b\x76\x31\xa7\x58\x0e\xc7\xa7\x03\x52\xcc\x0b\xfc\xf9\x03\xa2\x37\x58\x4e\xe0\x8d\xa5\x72\xa8\x52\xc5\x76" +
	"\x2c\xd7\x81\x25\xed\xc6\xc1\x3b\xa0\xf0\x65\x16\xc5\x54\x0c\x64\x73\xa3\x91\xa7\xef\x8e\xa9\x61\x34\xfd\x4e\x77" +
	"\xf8\x2a\xdd\xda\x2a\x1a\xbb\x77\xaf\x77\x00\x00\x00\xff\xff\x23\xf3\x70\xbe\x8e\x00\x00\x00")

func bindataBashCheckshBytes() ([]byte, error) {
	return bindataRead(
		_bindataBashChecksh,
		"bash/check.sh",
	)
}



func bindataBashChecksh() (*asset, error) {
	bytes, err := bindataBashCheckshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bash/check.sh",
		size: 142,
		md5checksum: "",
		mode: os.FileMode(493),
		modTime: time.Unix(1551110222, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataBashIssuesh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4f\x4f\x22\x41\x10\xc5\xef\xf3\x29\x6a\xb3\x1c\x76\x37\x34\x2c" +
	"\xbb\xc1\x44\x12\x0e\x84\x78\x53\x3c\x11\xcf\x45\x53\x62\x67\x7a\xba\xc7\xaa\x1e\x75\x42\xf8\xee\xa6\x86\x3f\x3a" +
	"\xa2\x44\x4e\xdd\x55\x53\xf3\x7b\xaf\x5e\xfa\xe7\x8f\x7e\x25\xdc\x5f\xb8\xd0\xa7\xf0\x04\x0b\x94\x87\xcc\x89\x54" +
	"\xf4\xeb\xf7\x3a\x03\x00\xbb\x84\xce\x40\x2f\xb3\xc9\xcd\xd5\xb8\xb3\xfe\x37\x32\xd6\x3b\x0a\x69\xa3\x4d\x2e\xa0" +
	"\xa3\x1f\x7a\x7f\xb4\xca\xa9\x4e\x31\x7a\x30\x2b\x0a\x39\xd5\x60\x72\xaa\x25\x45\xa6\xdd\xd0\xa1\x34\xcd\x51\xa2" +
	"\x08\xdc\x91\xb7\xb1\xa0\x41\x33\xfc\xa1\x83\xde\xa1\x40\x43\x5a\x06\x2c\x08\xa6\xb3\x71\x43\xea\xde\xce\xc7\xf3" +
	"\x90\x87\xf8\x1c\xba\xd7\xfb\x5b\xcb\xc1\x97\xca\xc7\x2a\x9f\x79\xb1\xc4\x89\xe9\xb1\x65\x21\xa7\x1a\xfd\x0a\x58" +
	"\x10\xcc\xbd\xf3\x7b\xb4\x15\x56\xe5\x58\x52\x10\xf1\xf0\x32\xfc\x7b\x09\x46\x71\x2e\x80\x1e\xa3\x03\x15\x8c\x22" +
	"\xc1\x4c\x27\x60\xb1\xa7\x12\xbd\x92\x0a\xad\x95\x6f\x51\x5d\x6e\x3b\x2e\xbc\xc1\xc1\xc4\x2a\xed\x4b\x62\x30\x4b" +
	"\xac\x05\xfe\x5f\x0c\xf5\x47\xcb\x84\x89\x84\xd8\xa1\x6f\xed\xef\x8a\x32\x72\x3a\x91\x43\x88\x25\xc7\xa2\x4c\x60" +
	"\x12\x57\x92\x2c\xaa\x1f\xf9\x6e\x3e\xcd\xfe\xad\x25\xb6\x41\x59\xe4\x18\xd3\x79\x4e\xce\x50\x7c\x97\xc2\x4e\xaf" +
	"\x79\x8a\x2d\x3d\xef\xe4\x94\xda\x31\x3b\xdb\x64\xaf\x01\x00\x00\xff\xff\x50\x85\xef\xb2\x05\x03\x00\x00")

func bindataBashIssueshBytes() ([]byte, error) {
	return bindataRead(
		_bindataBashIssuesh,
		"bash/issue.sh",
	)
}



func bindataBashIssuesh() (*asset, error) {
	bytes, err := bindataBashIssueshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bash/issue.sh",
		size: 773,
		md5checksum: "",
		mode: os.FileMode(493),
		modTime: time.Unix(1551110222, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataBashKeytabsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8c\x41\x0a\xc2\x30\x10\x45\xf7\x3d\xc5\xb7\x76\xa1\x8b\x38\xe8\x25" +
	"\x3c\xc7\xa4\x33\xd8\x30\x74\x8c\x69\x14\x8a\x78\x77\x21\xf5\x04\x2e\x1f\xef\xf1\xf6\x3b\x7a\x2e\x85\x62\x72\x52" +
	"\x7f\x21\xf2\x32\x75\xa6\x6b\xe5\x78\x38\xbe\x3b\x40\xc7\xe9\x8e\xfe\xaa\xae\x85\x6b\xf2\x1b\x36\xd9\x77\x80\xb1" +
	"\xcc\xc9\x11\xac\x82\xea\x9c\xa9\xe1\x69\xf3\x08\x19\x8d\xe9\x17\x3d\xd0\xb3\x48\x2e\xc9\x47\x84\xc2\x2e\xa6\x2b" +
	"\x86\xf3\x3f\x1f\xab\x2c\x82\x60\x18\x2e\xed\xf0\xf9\x06\x00\x00\xff\xff\x05\xe8\x6d\x45\xc4\x00\x00\x00")

func bindataBashKeytabshBytes() ([]byte, error) {
	return bindataRead(
		_bindataBashKeytabsh,
		"bash/keytab.sh",
	)
}



func bindataBashKeytabsh() (*asset, error) {
	bytes, err := bindataBashKeytabshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bash/keytab.sh",
		size: 196,
		md5checksum: "",
		mode: os.FileMode(493),
		modTime: time.Unix(1551110222, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataBashRootsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x4f\xf3\x30\x0c\x86\xef\xfd\x15\xfe\xf4\x71\x80\x83\xd7\x0e" +
	"\xd8\xd0\xf8\x23\x9c\xdd\xcc\xd0\xa8\x6d\x1c\x62\x17\x56\x21\xfe\x3b\x4a\x27\xb4\xac\x17\x4e\xad\xde\xc4\xef\xe3" +
	"\x27\xff\xff\xd5\x93\xa6\xba\xf5\xa1\xe6\xf0\x01\x2d\x69\x57\x25\x11\xbb\xbd\xfb\xaa\x00\xc0\x1d\xe1\x66\x9b\x7f" +
	"\xd2\x08\x8e\x36\x3d\xcf\x9b\xc8\xe3\x25\x70\x9c\xac\x48\x2c\x4d\x6a\xf9\x96\x9a\x24\xce\xa1\x44\x0e\xaa\x03\xbc" +
	"\x71\x48\x4a\x80\xc4\x7a\xbf\xdb\x03\xca\x64\x45\x21\x60\x24\xd5\x9c\xe5\xef\xf3\x0b\x0f\x4e\x46\xde\xc2\x63\x73" +
	"\xd8\x97\x2d\x89\xdf\x01\x7b\x9e\xaf\x46\x03\x7f\x02\x9e\x76\xcd\x01\xf0\x48\xb3\xc2\xd3\x43\xd3\x00\x6a\x47\x25" +
	"\xe8\x77\xd1\x33\xc9\x87\x15\x08\x5b\x32\xd7\x65\x54\xcf\xb3\x89\x0c\x80\x7e\x8c\x92\x6c\xc1\x2d\x36\x2b\x39\xc0" +
	"\x20\x31\xc9\x18\x0d\x70\x39\x71\x94\x19\xba\x0c\xe4\x72\xb8\x94\x2f\x03\xab\xec\xd5\x0f\x7c\xbd\x18\x0d\x9e\x14" +
	"\x1c\xe5\xe7\x2f\xa5\xcf\x6a\x41\xb2\x09\x1a\x9f\x0c\xd0\x87\xbf\x9d\xaa\xef\x9f\x00\x00\x00\xff\xff\xc8\xba\xbe" +
	"\xc4\xdc\x01\x00\x00")

func bindataBashRootshBytes() ([]byte, error) {
	return bindataRead(
		_bindataBashRootsh,
		"bash/root.sh",
	)
}



func bindataBashRootsh() (*asset, error) {
	bytes, err := bindataBashRootshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bash/root.sh",
		size: 476,
		md5checksum: "",
		mode: os.FileMode(493),
		modTime: time.Unix(1551110222, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"bash/check.sh":  bindataBashChecksh,
	"bash/issue.sh":  bindataBashIssuesh,
	"bash/keytab.sh": bindataBashKeytabsh,
	"bash/root.sh":   bindataBashRootsh,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"bash": {Func: nil, Children: map[string]*bintree{
		"check.sh": {Func: bindataBashChecksh, Children: map[string]*bintree{}},
		"issue.sh": {Func: bindataBashIssuesh, Children: map[string]*bintree{}},
		"keytab.sh": {Func: bindataBashKeytabsh, Children: map[string]*bintree{}},
		"root.sh": {Func: bindataBashRootsh, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
